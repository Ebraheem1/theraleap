(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{119:function(e,t,a){(e.exports=a(23)(!1)).push([e.i,".md-card[data-v-67d95d11]{max-width:700px;margin-top:20px;transition:background-color .45s ease-in-out}.md-card[data-v-67d95d11]:hover{background-color:#efffef}.type[data-v-67d95d11]{display:flex;flex-direction:row-reverse}.type span[data-v-67d95d11]{padding:10px;font-weight:200;user-select:none}.slide-enter-active[data-v-67d95d11],.slide-leave-active[data-v-67d95d11]{transition:all .75s ease-in-out;overflow:hidden}.slide-enter-to[data-v-67d95d11],.slide-leave[data-v-67d95d11]{max-height:300px}.slide-enter[data-v-67d95d11],.slide-leave-to[data-v-67d95d11]{max-height:0}@keyframes spin-data-v-67d95d11{0%{transform:rotate(0deg);color:#fff}50%{color:#00897b}to{transform:rotate(1turn);color:#fff}}.intro[data-v-67d95d11]{background-color:#212121;color:#fff;padding:20px}.intro .header[data-v-67d95d11]{display:flex;justify-content:space-between}.intro .header .spin[data-v-67d95d11]{animation:3s ease-in-out 0s infinite spin-data-v-67d95d11}.intro .header .white-icon[data-v-67d95d11]{color:#fff;margin-right:5px}.intro .header span[data-v-67d95d11]{align-self:center}.intro .content[data-v-67d95d11]{padding-left:20px;padding-right:20px;max-width:500px}.cancelmargin[data-v-67d95d11]{margin-top:-16px;margin-left:-16px;margin-right:-16px}",""])},120:function(e,t,a){var s=a(119);"string"==typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);(0,a(22).default)("7f3ea677",s,!0,{})},158:function(e,t,a){"use strict";a.r(t);var s=a(1),r=a(6),i=a(13),n=a(193);let o=class extends s.default{mounted(){void 0===n.b(this.$store)&&n.e(this.$store,!0)}preprocessorSelectionUpdated(){const e=[];Object.keys(this.preprocessors).forEach(t=>{this.preprocessors[t].enabled&&e.push(this.preprocessors[t].constructConfig())}),this.deviceFacade.updatePreProcessors(e)}get deviceFacade(){return i.e(this.$store)}get preprocessors(){return n.a(this.$store)}get showIntro(){return n.b(this.$store)}set showIntro(e){n.e(this.$store,e)}get naiveThrottlerSwitch(){return this.preprocessors.naiveThrottler.enabled}set naiveThrottlerSwitch(e){n.c(this.$store,{name:"naiveThrottler",newState:{enabled:e}})}get naiveThrottlerN(){return this.preprocessors.naiveThrottler.n}set naiveThrottlerN(e){n.c(this.$store,{name:"naiveThrottler",newState:{n:e}})}get uselessFrameSwitch(){return this.preprocessors.uselessFrames.enabled}set uselessFrameSwitch(e){n.c(this.$store,{name:"uselessFrames",newState:{enabled:e}})}get fpsThrottlerSwitch(){return this.preprocessors.fpsThrottler.enabled}set fpsThrottlerSwitch(e){n.c(this.$store,{name:"fpsThrottler",newState:{enabled:e}})}get fpsThrottlerValue(){return this.preprocessors.fpsThrottler.frameRate}set fpsThrottlerValue(e){n.c(this.$store,{name:"fpsThrottler",newState:{frameRate:e}})}};var d=o=function(e,t,a,s){var r,i=arguments.length,n=i<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,a):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,a,s);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(n=(i<3?r(n):i>3?r(t,a,n):r(t,a))||n);return i>3&&n&&Object.defineProperty(t,a,n),n}([Object(r.a)({components:{}})],o),c=a(10);var l=function(e){a(120)},h=Object(c.a)(d,function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("section",{staticClass:"pre-processing"},[a("div",{staticClass:"cancelmargin"},[a("transition",{attrs:{name:"slide"}},[e.showIntro?a("section",[a("div",{staticClass:"intro"},[a("div",{staticClass:"header"},[a("h1",[a("md-icon",{staticClass:"white-icon spin md-size-2x"},[e._v("memory")]),e._v("Data Preprocessing Configuration")],1),e._v(" "),a("span",{on:{click:function(t){e.showIntro=!1}}},[a("md-icon",{staticClass:"white-icon"},[e._v("clear")])],1)]),e._v(" "),a("div",{staticClass:"content"},[e._v("\n                    Toggle and configure various data preprocessing routines here. All Data Preprocessing is done right after the data is sent from the device, and immediately before the Device Data is fed into the Classification Engine. The main goal of the Preprocessing Routines is to provide the Classification Routines with less data that is not useful for their operation, and thus increase classification performance.\n                ")])])]):e._e()])],1),e._v(" "),a("md-card",{attrs:{"md-with-hover":""}},[a("md-card-header",[a("md-card-header-text",[a("div",{staticClass:"md-title"},[a("md-icon",[e._v("whatshot")]),e._v("Destroy Useless Frames")],1),e._v(" "),a("div",{staticClass:"md-subhead"},[e._v("Destroy Frames that don't contain relevant data immediately.")])]),e._v(" "),a("div",{staticClass:"enabled"},[a("md-switch",{staticClass:"md-accent",on:{change:e.preprocessorSelectionUpdated},model:{value:e.uselessFrameSwitch,callback:function(t){e.uselessFrameSwitch=t},expression:"uselessFrameSwitch"}},[e._v("Enable")])],1)],1),e._v(" "),a("md-card-content",[e._v("\n      This Leap Motion specific preprocessor is based on a very simple assumption: if device\n      frames contain no actual hand tracking data, they are of no use to us! Thus, this preprocessor\n      will filter tracking data containing no useful information.\n  ")]),e._v(" "),a("div",{staticClass:"type"},[a("span",[e._v("LEAP MOTION SPECIFIC")])])],1),e._v(" "),a("md-card",{attrs:{"md-with-hover":""}},[a("md-card-header",[a("md-card-header-text",[a("div",{staticClass:"md-title"},[a("md-icon",[e._v("content_cut")]),e._v("Naive Throttler")],1),e._v(" "),a("div",{staticClass:"md-subhead"},[e._v("Drop every nth Frame from the Hand Tracking Device")])]),e._v(" "),a("div",{staticClass:"enabled"},[a("md-switch",{staticClass:"md-accent",on:{change:e.preprocessorSelectionUpdated},model:{value:e.naiveThrottlerSwitch,callback:function(t){e.naiveThrottlerSwitch=t},expression:"naiveThrottlerSwitch"}},[e._v("Enable")])],1)],1),e._v(" "),a("md-card-content",[e._v("\n      Take only every nth Frame from the Hand Tracking Device. \n      Useful for initially reducing Framerate or for deploying the software on very weak hardware. \n      Naive in the sense that it does not look at the data. \n      It will throw away potentially valuable information!\n      Configure this Preprocessor with a whole Integer "),a("span",{staticClass:"source"},[e._v("n")]),e._v(" (as in,\n      take every "),a("span",{staticClass:"source"},[e._v("n")]),e._v("th frame). "),a("br"),e._v("\n      Choosing criteria: "),a("span",{staticClass:"source"},[e._v("modulus(index"),a("sub",[e._v("frame")]),e._v(", n) = 0")])]),e._v(" "),a("md-card-actions",{attrs:{"md-alignment":"left"}},[a("md-field",[a("label",[e._v("n")]),e._v(" "),a("md-input",{attrs:{type:"number"},model:{value:e.naiveThrottlerN,callback:function(t){e.naiveThrottlerN=t},expression:"naiveThrottlerN"}}),e._v(" "),a("span",{staticClass:"md-helper-text"},[e._v("Take every nth frame")])],1)],1),e._v(" "),a("div",{staticClass:"type"},[a("span",[e._v("GENERIC")])])],1),e._v(" "),a("md-card",{attrs:{"md-with-hover":""}},[a("md-card-header",[a("md-card-header-text",[a("div",{staticClass:"md-title"},[a("md-icon",[e._v("av_timer")]),e._v("FPS Throttler")],1),e._v(" "),a("div",{staticClass:"md-subhead"},[e._v("Temporal rate limit of physical device frames")])]),e._v(" "),a("div",{staticClass:"enabled"},[a("md-switch",{staticClass:"md-accent",on:{change:e.preprocessorSelectionUpdated},model:{value:e.fpsThrottlerSwitch,callback:function(t){e.fpsThrottlerSwitch=t},expression:"fpsThrottlerSwitch"}},[e._v("Enable")])],1)],1),e._v(" "),a("md-card-content",[e._v("\n      The Websocket based Leap Motion device driver is lacking one very important feature at the moment \n      ("),a("span",{staticClass:"source"},[e._v("Leap Motion SDK2, APIv7")]),e._v("): we can't specify at what rate the device should\n      send frames to us! Because of this, the device is generating lots of unnecessary data, as most of the\n      time a lower framerate suffices for the classification. Use this preprocessor to limit the framerate from\n      the device to a fixed rate. The usual framerate coming from the Leap Motion device is "),a("span",{staticClass:"source"},[e._v("100 FPS")]),e._v(".\n      The default value of this preprocessor, which is "),a("span",{staticClass:"source"},[e._v("28 FPS")]),e._v(", should suffice for the\n      majority of our classification needs.\n  ")]),e._v(" "),a("md-card-actions",{attrs:{"md-alignment":"left"}},[a("md-field",[a("label",[e._v("n")]),e._v(" "),a("md-input",{attrs:{type:"number"},on:{change:e.preprocessorSelectionUpdated},model:{value:e.fpsThrottlerValue,callback:function(t){e.fpsThrottlerValue=t},expression:"fpsThrottlerValue"}}),e._v(" "),a("span",{staticClass:"md-helper-text"},[e._v("Target FPS")])],1)],1),e._v(" "),a("div",{staticClass:"type"},[a("span",[e._v("GENERIC")])])],1)],1)},[],!1,l,"data-v-67d95d11",null);t.default=h.exports}}]);