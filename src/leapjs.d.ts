/** Declaration file generated by dts-gen */

declare module "leapjs" {
  export class CircularBuffer {
    constructor(size: any);

    get(i: any): any;

    push(o: any): any;
  }

  export class Controller {
    constructor(opts: any);

    addListener(type: any, listener: any): any;

    addStep(step: any): void;

    checkOutOfDate(): any;

    connect(): any;

    connected(): any;

    disconnect(): any;

    emit(type: any, args: any): any;

    emitHandEvents(frame: any): void;

    eventNames(): any;

    frame(num: any): any;

    gesture(type: any, cb: any): any;

    getMaxListeners(): any;

    inBackgroundPage(): any;

    inBrowser(): any;

    listenerCount(type: any): any;

    listeners(type: any): any;

    loop(callback: any): any;

    on(type: any, listener: any): any;

    once(type: any, listener: any): any;

    prependListener(type: any, listener: any): any;

    prependOnceListener(type: any, listener: any): any;

    processFinishedFrame(frame: any): void;

    processFrame(frame: any): void;

    rawListeners(type: any): any;

    removeAllListeners(type: any, ...args: any[]): any;

    removeListener(type: any, listener: any): any;

    setBackground(state: any): any;

    setMaxListeners(n: any): any;

    setOptimizeHMD(state: any): any;

    setupConnectionEvents(): void;

    setupFrameEvents(opts: any): void;

    startAnimationLoop(): void;

    stopUsing(pluginName: any): any;

    streaming(): any;

    use(pluginName: any, options: any): any;

    useAnimationLoop(): any;

    useRegisteredPlugins(): void;

    static plugin(pluginName: any, factory: any): any;

    static plugins(): any;
  }

  export class EventEmitter {
    constructor();

    addListener(type: any, listener: any): any;

    emit(type: any, args: any): any;

    eventNames(): any;

    getMaxListeners(): any;

    listenerCount(type: any): any;

    listeners(type: any): any;

    on(type: any, listener: any): any;

    once(type: any, listener: any): any;

    prependListener(type: any, listener: any): any;

    prependOnceListener(type: any, listener: any): any;

    rawListeners(type: any): any;

    removeAllListeners(type: any, ...args: any[]): any;

    removeListener(type: any, listener: any): any;

    setMaxListeners(n: any): any;

    static EventEmitter: any;

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static usingDomains: boolean;
  }

  export class Finger {
    constructor(data: any);

    addBones(data: any): void;

    hand(): any;

    toString(): any;

    static Invalid: {
      valid: boolean;
    };
  }

  export class Frame {
    constructor(data: any);

    addPointable(pointable: any): void;

    dump(): any;

    finger(id: any): any;

    hand(id: any): any;

    pointable(id: any): any;

    postprocessData(data: any): any;

    rotationAngle(sinceFrame: any, axis: any): any;

    rotationAxis(sinceFrame: any): any;

    rotationMatrix(sinceFrame: any): any;

    scaleFactor(sinceFrame: any): any;

    toString(): any;

    tool(id: any): any;

    translation(sinceFrame: any): any;
  }

  export class Hand {
    constructor(data: any);

    finger(id: any): any;

    pitch(): any;

    roll(): any;

    rotationAngle(sinceFrame: any, axis: any): any;

    rotationAxis(sinceFrame: any): any;

    rotationMatrix(sinceFrame: any): any;

    scaleFactor(sinceFrame: any): any;

    toString(): any;

    translation(sinceFrame: any): any;

    yaw(): any;
  }

  export class InteractionBox {
    constructor(data: any);

    denormalizePoint(normalizedPosition: any): any;

    normalizePoint(position: any, clamp: any): any;

    toString(): any;

    static Invalid: {
      valid: boolean;
    };
  }

  export class Pointable {
    constructor(data: any);

    hand(): any;

    toString(): any;

    static Invalid: {
      valid: boolean;
    };
  }

  export const UI: {
    UI: {
      Cursor: any;
      Region: any;
    };
  };

  export const glMatrix: {
    glMatrix: {
      setMatrixArrayType: any;
      toRadian: any;
    };
    mat2: {
      LDU: any;
      adjoint: any;
      clone: any;
      copy: any;
      create: any;
      determinant: any;
      frob: any;
      identity: any;
      invert: any;
      mul: any;
      multiply: any;
      rotate: any;
      scale: any;
      str: any;
      transpose: any;
    };
    mat2d: {
      clone: any;
      copy: any;
      create: any;
      determinant: any;
      frob: any;
      identity: any;
      invert: any;
      mul: any;
      multiply: any;
      rotate: any;
      scale: any;
      str: any;
      translate: any;
    };
    mat3: {
      adjoint: any;
      clone: any;
      copy: any;
      create: any;
      determinant: any;
      frob: any;
      fromMat2d: any;
      fromMat4: any;
      fromQuat: any;
      identity: any;
      invert: any;
      mul: any;
      multiply: any;
      normalFromMat4: any;
      rotate: any;
      scale: any;
      str: any;
      translate: any;
      transpose: any;
    };
    mat4: {
      adjoint: any;
      clone: any;
      copy: any;
      create: any;
      determinant: any;
      frob: any;
      fromQuat: any;
      fromRotationTranslation: any;
      frustum: any;
      identity: any;
      invert: any;
      lookAt: any;
      mul: any;
      multiply: any;
      ortho: any;
      perspective: any;
      rotate: any;
      rotateX: any;
      rotateY: any;
      rotateZ: any;
      scale: any;
      str: any;
      translate: any;
      transpose: any;
    };
    quat: {
      add: any;
      calculateW: any;
      clone: any;
      conjugate: any;
      copy: any;
      create: any;
      dot: any;
      fromMat3: any;
      fromValues: any;
      identity: any;
      invert: any;
      len: any;
      length: any;
      lerp: any;
      mul: any;
      multiply: any;
      normalize: any;
      rotateX: any;
      rotateY: any;
      rotateZ: any;
      rotationTo: any;
      scale: any;
      set: any;
      setAxes: any;
      setAxisAngle: any;
      slerp: any;
      sqrLen: any;
      squaredLength: any;
      str: any;
    };
    vec2: {
      add: any;
      clone: any;
      copy: any;
      create: any;
      cross: any;
      dist: any;
      distance: any;
      div: any;
      divide: any;
      dot: any;
      forEach: any;
      fromValues: any;
      len: any;
      length: any;
      lerp: any;
      max: any;
      min: any;
      mul: any;
      multiply: any;
      negate: any;
      normalize: any;
      random: any;
      scale: any;
      scaleAndAdd: any;
      set: any;
      sqrDist: any;
      sqrLen: any;
      squaredDistance: any;
      squaredLength: any;
      str: any;
      sub: any;
      subtract: any;
      transformMat2: any;
      transformMat2d: any;
      transformMat3: any;
      transformMat4: any;
    };
    vec3: {
      add: any;
      clone: any;
      copy: any;
      create: any;
      cross: any;
      dist: any;
      distance: any;
      div: any;
      divide: any;
      dot: any;
      forEach: any;
      fromValues: any;
      len: any;
      length: any;
      lerp: any;
      max: any;
      min: any;
      mul: any;
      multiply: any;
      negate: any;
      normalize: any;
      random: any;
      rotateX: any;
      rotateY: any;
      rotateZ: any;
      scale: any;
      scaleAndAdd: any;
      set: any;
      sqrDist: any;
      sqrLen: any;
      squaredDistance: any;
      squaredLength: any;
      str: any;
      sub: any;
      subtract: any;
      transformMat3: any;
      transformMat4: any;
      transformQuat: any;
    };
    vec4: {
      add: any;
      clone: any;
      copy: any;
      create: any;
      dist: any;
      distance: any;
      div: any;
      divide: any;
      dot: any;
      forEach: any;
      fromValues: any;
      len: any;
      length: any;
      lerp: any;
      max: any;
      min: any;
      mul: any;
      multiply: any;
      negate: any;
      normalize: any;
      random: any;
      scale: any;
      scaleAndAdd: any;
      set: any;
      sqrDist: any;
      sqrLen: any;
      squaredDistance: any;
      squaredLength: any;
      str: any;
      sub: any;
      subtract: any;
      transformMat4: any;
      transformQuat: any;
    };
  };

  export const loopController: any;

  export const version: {
    dot: number;
    full: string;
    major: number;
    minor: number;
  };

  export function JSONProtocol(header: any): any;

  export function loop(opts: any, callback: any): any;

  export function plugin(name: any, options: any): void;

  export namespace CircularBuffer {
    namespace prototype {
      function get(i: any): any;

      function push(o: any): any;

      namespace get {
        const prototype: {};
      }

      namespace push {
        const prototype: {};
      }
    }
  }

  export namespace Controller {
    namespace plugin {
      const prototype: {};
    }

    namespace plugins {
      const prototype: {};
    }

    namespace prototype {
      const domain: any;

      function addListener(type: any, listener: any): any;

      function addStep(step: any): void;

      function checkOutOfDate(): any;

      function connect(): any;

      function connected(): any;

      function disconnect(): any;

      function emit(type: any, args: any): any;

      function emitHandEvents(frame: any): void;

      function eventNames(): any;

      function frame(num: any): any;

      function gesture(type: any, cb: any): any;

      function getMaxListeners(): any;

      function inBackgroundPage(): any;

      function inBrowser(): any;

      function listenerCount(type: any): any;

      function listeners(type: any): any;

      function loop(callback: any): any;

      function on(type: any, listener: any): any;

      function once(type: any, listener: any): any;

      function prependListener(type: any, listener: any): any;

      function prependOnceListener(type: any, listener: any): any;

      function processFinishedFrame(frame: any): void;

      function processFrame(frame: any): void;

      function rawListeners(type: any): any;

      function removeAllListeners(type: any, ...args: any[]): any;

      function removeListener(type: any, listener: any): any;

      function setBackground(state: any): any;

      function setMaxListeners(n: any): any;

      function setOptimizeHMD(state: any): any;

      function setupConnectionEvents(): void;

      function setupFrameEvents(opts: any): void;

      function startAnimationLoop(): void;

      function stopUsing(pluginName: any): any;

      function streaming(): any;

      function use(pluginName: any, options: any): any;

      function useAnimationLoop(): any;

      function useRegisteredPlugins(): void;

      namespace addListener {
        const prototype: {};
      }

      namespace addStep {
        const prototype: {};
      }

      namespace checkOutOfDate {
        const prototype: {};
      }

      namespace connect {
        const prototype: {};
      }

      namespace connected {
        const prototype: {};
      }

      namespace disconnect {
        const prototype: {};
      }

      namespace emit {
        const prototype: {};
      }

      namespace emitHandEvents {
        const prototype: {};
      }

      namespace eventNames {
        const prototype: {};
      }

      namespace frame {
        const prototype: {};
      }

      namespace gesture {
        const prototype: {};
      }

      namespace getMaxListeners {
        const prototype: {};
      }

      namespace inBackgroundPage {
        const prototype: {};
      }

      namespace inBrowser {
        const prototype: {};
      }

      namespace listenerCount {
        const prototype: {};
      }

      namespace listeners {
        const prototype: {};
      }

      namespace loop {
        const prototype: {};
      }

      namespace on {
        const prototype: {};
      }

      namespace once {
        const prototype: {};
      }

      namespace prependListener {
        const prototype: {};
      }

      namespace prependOnceListener {
        const prototype: {};
      }

      namespace processFinishedFrame {
        const prototype: {};
      }

      namespace processFrame {
        const prototype: {};
      }

      namespace rawListeners {
        const prototype: {};
      }

      namespace removeAllListeners {
        const prototype: {};
      }

      namespace removeListener {
        const prototype: {};
      }

      namespace setBackground {
        const prototype: {};
      }

      namespace setMaxListeners {
        const prototype: {};
      }

      namespace setOptimizeHMD {
        const prototype: {};
      }

      namespace setupConnectionEvents {
        const prototype: {};
      }

      namespace setupFrameEvents {
        const prototype: {};
      }

      namespace startAnimationLoop {
        const prototype: {};
      }

      namespace stopUsing {
        const prototype: {};
      }

      namespace streaming {
        const prototype: {};
      }

      namespace use {
        const prototype: {};
      }

      namespace useAnimationLoop {
        const prototype: {};
      }

      namespace useRegisteredPlugins {
        const prototype: {};
      }
    }
  }

  export namespace EventEmitter {
    namespace init {
      const prototype: {};
    }

    namespace listenerCount {
      const prototype: {};
    }

    namespace prototype {
      const domain: any;

      function addListener(type: any, listener: any): any;

      function emit(type: any, args: any): any;

      function eventNames(): any;

      function getMaxListeners(): any;

      function listenerCount(type: any): any;

      function listeners(type: any): any;

      function on(type: any, listener: any): any;

      function once(type: any, listener: any): any;

      function prependListener(type: any, listener: any): any;

      function prependOnceListener(type: any, listener: any): any;

      function rawListeners(type: any): any;

      function removeAllListeners(type: any, ...args: any[]): any;

      function removeListener(type: any, listener: any): any;

      function setMaxListeners(n: any): any;

      namespace addListener {
        const prototype: {};
      }

      namespace emit {
        const prototype: {};
      }

      namespace eventNames {
        const prototype: {};
      }

      namespace getMaxListeners {
        const prototype: {};
      }

      namespace listenerCount {
        const prototype: {};
      }

      namespace listeners {
        const prototype: {};
      }

      namespace on {
        const prototype: {};
      }

      namespace once {
        const prototype: {};
      }

      namespace prependListener {
        const prototype: {};
      }

      namespace prependOnceListener {
        const prototype: {};
      }

      namespace rawListeners {
        const prototype: {};
      }

      namespace removeAllListeners {
        const prototype: {};
      }

      namespace removeListener {
        const prototype: {};
      }

      namespace setMaxListeners {
        const prototype: {};
      }
    }
  }

  export namespace Finger {
    namespace prototype {
      function addBones(data: any): void;

      function hand(): any;

      function toString(): any;

      namespace addBones {
        const prototype: {};
      }

      namespace hand {
        const prototype: {};
      }

      namespace toString {
        const prototype: {};
      }
    }
  }

  export namespace Frame {
    namespace Invalid {
      const fingers: any[];

      const gestures: any[];

      const hands: any[];

      const pointables: any[];

      const tools: any[];

      const valid: boolean;

      function dump(): any;

      function finger(): any;

      function hand(): any;

      function pointable(): any;

      function rotationAngle(): any;

      function rotationAxis(): any;

      function rotationMatrix(): any;

      function scaleFactor(): any;

      function toString(): any;

      function translation(): any;

      namespace dump {
        const prototype: {};
      }

      namespace finger {
        const prototype: {};
      }

      namespace hand {
        const prototype: {};
      }

      namespace pointable {
        const prototype: {};
      }

      namespace rotationAngle {
        const prototype: {};
      }

      namespace rotationAxis {
        const prototype: {};
      }

      namespace rotationMatrix {
        const prototype: {};
      }

      namespace scaleFactor {
        const prototype: {};
      }

      namespace toString {
        const prototype: {};
      }

      namespace translation {
        const prototype: {};
      }
    }

    namespace prototype {
      function addPointable(pointable: any): void;

      function dump(): any;

      function finger(id: any): any;

      function hand(id: any): any;

      function pointable(id: any): any;

      function postprocessData(data: any): any;

      function rotationAngle(sinceFrame: any, axis: any): any;

      function rotationAxis(sinceFrame: any): any;

      function rotationMatrix(sinceFrame: any): any;

      function scaleFactor(sinceFrame: any): any;

      function toString(): any;

      function tool(id: any): any;

      function translation(sinceFrame: any): any;

      namespace addPointable {
        const prototype: {};
      }

      namespace dump {
        const prototype: {};
      }

      namespace finger {
        const prototype: {};
      }

      namespace hand {
        const prototype: {};
      }

      namespace pointable {
        const prototype: {};
      }

      namespace postprocessData {
        const prototype: {};
      }

      namespace rotationAngle {
        const prototype: {};
      }

      namespace rotationAxis {
        const prototype: {};
      }

      namespace rotationMatrix {
        const prototype: {};
      }

      namespace scaleFactor {
        const prototype: {};
      }

      namespace toString {
        const prototype: {};
      }

      namespace tool {
        const prototype: {};
      }

      namespace translation {
        const prototype: {};
      }
    }
  }

  export namespace Gesture {
    class Gesture {
      constructor(gesture: any, frame: any);

      addListener(type: any, listener: any): any;

      emit(type: any, args: any): any;

      eventNames(): any;

      getMaxListeners(): any;

      listenerCount(type: any): any;

      listeners(type: any): any;

      on(type: any, listener: any): any;

      once(type: any, listener: any): any;

      prependListener(type: any, listener: any): any;

      prependOnceListener(type: any, listener: any): any;

      rawListeners(type: any): any;

      removeAllListeners(type: any, ...args: any[]): any;

      removeListener(type: any, listener: any): any;

      setMaxListeners(n: any): any;

      translation(): any;

      update(gesture: any, frame: any): void;
    }

    function createGesture(data: any): any;

    function gestureListener(controller: any, type: any): any;

    namespace Gesture {
      namespace prototype {
        const domain: any;

        function addListener(type: any, listener: any): any;

        function emit(type: any, args: any): any;

        function eventNames(): any;

        function getMaxListeners(): any;

        function listenerCount(type: any): any;

        function listeners(type: any): any;

        function on(type: any, listener: any): any;

        function once(type: any, listener: any): any;

        function prependListener(type: any, listener: any): any;

        function prependOnceListener(type: any, listener: any): any;

        function rawListeners(type: any): any;

        function removeAllListeners(type: any, ...args: any[]): any;

        function removeListener(type: any, listener: any): any;

        function setMaxListeners(n: any): any;

        function translation(): any;

        function update(gesture: any, frame: any): void;

        namespace addListener {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.addListener
          const prototype: any;
        }

        namespace emit {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.emit
          const prototype: any;
        }

        namespace eventNames {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.eventNames
          const prototype: any;
        }

        namespace getMaxListeners {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.getMaxListeners
          const prototype: any;
        }

        namespace listenerCount {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.listenerCount
          const prototype: any;
        }

        namespace listeners {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.listeners
          const prototype: any;
        }

        namespace on {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.on
          const prototype: any;
        }

        namespace once {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.once
          const prototype: any;
        }

        namespace prependListener {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.prependListener
          const prototype: any;
        }

        namespace prependOnceListener {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.prependOnceListener
          const prototype: any;
        }

        namespace rawListeners {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.rawListeners
          const prototype: any;
        }

        namespace removeAllListeners {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.removeAllListeners
          const prototype: any;
        }

        namespace removeListener {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.removeListener
          const prototype: any;
        }

        namespace setMaxListeners {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.setMaxListeners
          const prototype: any;
        }

        namespace translation {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.translation
          const prototype: any;
        }

        namespace update {
          // Too-deep object hierarchy from leapjs.Gesture.Gesture.prototype.update
          const prototype: any;
        }
      }
    }

    namespace createGesture {
      const prototype: {};
    }

    namespace gestureListener {
      const prototype: {};
    }
  }

  export namespace Hand {
    namespace Invalid {
      const fingers: any[];

      const left: boolean;

      const pointables: any[];

      const tools: any[];

      const valid: boolean;

      function dump(): any;

      function finger(): any;

      function pointable(): any;

      function rotationAngle(): any;

      function rotationAxis(): any;

      function rotationMatrix(): any;

      function scaleFactor(): any;

      function toString(): any;

      function translation(): any;

      namespace dump {
        const prototype: {};
      }

      namespace finger {
        const prototype: {};
      }

      namespace pointable {
        const prototype: {};
      }

      namespace rotationAngle {
        const prototype: {};
      }

      namespace rotationAxis {
        const prototype: {};
      }

      namespace rotationMatrix {
        const prototype: {};
      }

      namespace scaleFactor {
        const prototype: {};
      }

      namespace toString {
        const prototype: {};
      }

      namespace translation {
        const prototype: {};
      }
    }

    namespace prototype {
      function finger(id: any): any;

      function pitch(): any;

      function roll(): any;

      function rotationAngle(sinceFrame: any, axis: any): any;

      function rotationAxis(sinceFrame: any): any;

      function rotationMatrix(sinceFrame: any): any;

      function scaleFactor(sinceFrame: any): any;

      function toString(): any;

      function translation(sinceFrame: any): any;

      function yaw(): any;

      namespace finger {
        const prototype: {};
      }

      namespace pitch {
        const prototype: {};
      }

      namespace roll {
        const prototype: {};
      }

      namespace rotationAngle {
        const prototype: {};
      }

      namespace rotationAxis {
        const prototype: {};
      }

      namespace rotationMatrix {
        const prototype: {};
      }

      namespace scaleFactor {
        const prototype: {};
      }

      namespace toString {
        const prototype: {};
      }

      namespace translation {
        const prototype: {};
      }

      namespace yaw {
        const prototype: {};
      }
    }
  }

  export namespace InteractionBox {
    namespace prototype {
      function denormalizePoint(normalizedPosition: any): any;

      function normalizePoint(position: any, clamp: any): any;

      function toString(): any;

      namespace denormalizePoint {
        const prototype: {};
      }

      namespace normalizePoint {
        const prototype: {};
      }

      namespace toString {
        const prototype: {};
      }
    }
  }

  export namespace JSONProtocol {
    const prototype: {};
  }

  export namespace Pointable {
    namespace prototype {
      function hand(): any;

      function toString(): any;

      namespace hand {
        const prototype: {};
      }

      namespace toString {
        const prototype: {};
      }
    }
  }

  export namespace loop {
    const prototype: {};
  }

  export namespace mat3 {
    function adjoint(out: any, a: any): any;

    function clone(a: any): any;

    function copy(out: any, a: any): any;

    function create(): any;

    function determinant(a: any): any;

    function frob(a: any): any;

    function fromMat2d(out: any, a: any): any;

    function fromMat4(out: any, a: any): any;

    function fromQuat(out: any, q: any): any;

    function identity(out: any): any;

    function invert(out: any, a: any): any;

    function mul(out: any, a: any, b: any): any;

    function multiply(out: any, a: any, b: any): any;

    function normalFromMat4(out: any, a: any): any;

    function rotate(out: any, a: any, rad: any): any;

    function scale(out: any, a: any, v: any): any;

    function str(a: any): any;

    function translate(out: any, a: any, v: any): any;

    function transpose(out: any, a: any): any;

    namespace adjoint {
      const prototype: {};
    }

    namespace clone {
      const prototype: {};
    }

    namespace copy {
      const prototype: {};
    }

    namespace create {
      const prototype: {};
    }

    namespace determinant {
      const prototype: {};
    }

    namespace frob {
      const prototype: {};
    }

    namespace fromMat2d {
      const prototype: {};
    }

    namespace fromMat4 {
      const prototype: {};
    }

    namespace fromQuat {
      const prototype: {};
    }

    namespace identity {
      const prototype: {};
    }

    namespace invert {
      const prototype: {};
    }

    namespace mul {
      const prototype: {};
    }

    namespace multiply {
      const prototype: {};
    }

    namespace normalFromMat4 {
      const prototype: {};
    }

    namespace rotate {
      const prototype: {};
    }

    namespace scale {
      const prototype: {};
    }

    namespace str {
      const prototype: {};
    }

    namespace translate {
      const prototype: {};
    }

    namespace transpose {
      const prototype: {};
    }
  }

  export namespace plugin {
    const prototype: {};
  }

  export namespace vec3 {
    function add(out: any, a: any, b: any): any;

    function clone(a: any): any;

    function copy(out: any, a: any): any;

    function create(): any;

    function cross(out: any, a: any, b: any): any;

    function dist(a: any, b: any): any;

    function distance(a: any, b: any): any;

    function div(out: any, a: any, b: any): any;

    function divide(out: any, a: any, b: any): any;

    function dot(a: any, b: any): any;

    function forEach(
      a: any,
      stride: any,
      offset: any,
      count: any,
      fn: any,
      arg: any
    ): any;

    function fromValues(x: any, y: any, z: any): any;

    function len(a: any): any;

    function length(a: any): any;

    function lerp(out: any, a: any, b: any, t: any): any;

    function max(out: any, a: any, b: any): any;

    function min(out: any, a: any, b: any): any;

    function mul(out: any, a: any, b: any): any;

    function multiply(out: any, a: any, b: any): any;

    function negate(out: any, a: any): any;

    function normalize(out: any, a: any): any;

    function random(out: any, scale: any): any;

    function rotateX(out: any, a: any, b: any, c: any): any;

    function rotateY(out: any, a: any, b: any, c: any): any;

    function rotateZ(out: any, a: any, b: any, c: any): any;

    function scale(out: any, a: any, b: any): any;

    function scaleAndAdd(out: any, a: any, b: any, scale: any): any;

    function set(out: any, x: any, y: any, z: any): any;

    function sqrDist(a: any, b: any): any;

    function sqrLen(a: any): any;

    function squaredDistance(a: any, b: any): any;

    function squaredLength(a: any): any;

    function str(a: any): any;

    function sub(out: any, a: any, b: any): any;

    function subtract(out: any, a: any, b: any): any;

    function transformMat3(out: any, a: any, m: any): any;

    function transformMat4(out: any, a: any, m: any): any;

    function transformQuat(out: any, a: any, q: any): any;

    namespace add {
      const prototype: {};
    }

    namespace clone {
      const prototype: {};
    }

    namespace copy {
      const prototype: {};
    }

    namespace create {
      const prototype: {};
    }

    namespace cross {
      const prototype: {};
    }

    namespace dist {
      const prototype: {};
    }

    namespace distance {
      const prototype: {};
    }

    namespace div {
      const prototype: {};
    }

    namespace divide {
      const prototype: {};
    }

    namespace dot {
      const prototype: {};
    }

    namespace forEach {
      const prototype: {};
    }

    namespace fromValues {
      const prototype: {};
    }

    namespace len {
      const prototype: {};
    }

    namespace length {
      const prototype: {};
    }

    namespace lerp {
      const prototype: {};
    }

    namespace max {
      const prototype: {};
    }

    namespace min {
      const prototype: {};
    }

    namespace mul {
      const prototype: {};
    }

    namespace multiply {
      const prototype: {};
    }

    namespace negate {
      const prototype: {};
    }

    namespace normalize {
      const prototype: {};
    }

    namespace random {
      const prototype: {};
    }

    namespace rotateX {
      const prototype: {};
    }

    namespace rotateY {
      const prototype: {};
    }

    namespace rotateZ {
      const prototype: {};
    }

    namespace scale {
      const prototype: {};
    }

    namespace scaleAndAdd {
      const prototype: {};
    }

    namespace set {
      const prototype: {};
    }

    namespace sqrDist {
      const prototype: {};
    }

    namespace sqrLen {
      const prototype: {};
    }

    namespace squaredDistance {
      const prototype: {};
    }

    namespace squaredLength {
      const prototype: {};
    }

    namespace str {
      const prototype: {};
    }

    namespace sub {
      const prototype: {};
    }

    namespace subtract {
      const prototype: {};
    }

    namespace transformMat3 {
      const prototype: {};
    }

    namespace transformMat4 {
      const prototype: {};
    }

    namespace transformQuat {
      const prototype: {};
    }
  }
}
